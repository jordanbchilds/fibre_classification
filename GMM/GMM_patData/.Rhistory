# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 4
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
n_2 = 5
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = double(2)
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(2,-1.5,-1.5,2), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 5
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = double(2)
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 5 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(2,-1.5,-1.5,2), nrow=2, ncol=2, byrow=TRUE)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 5
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = double(2)
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
delta = matrix(c(5,-4,-4,5), nrow=2, ncol=2, byrow=TRUE)
eigen(delta)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 5
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = double(2)
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 5 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(5,-4,-4,5), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 5
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 8 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(5,-4,-4,5), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 5
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 8 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(2,-1.5,-1.5,2), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 5
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 2 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(2,-1.5,-1.5,2), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 2
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 4 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(2,-1.5,-1.5,2), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 4
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 5 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(2,-1.5,-1.5,2), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 4
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 4 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta = matrix(c(2,-1.5,-1.5,2), nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 3
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20 )
n_1 = 4 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta_vec = c(2,-1.5,-1.5,2)
delta = matrix(delta_vec, nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 3
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20, main=paste('n_1=',n_1,', n_2=',n_2,', delta=',delta_vec) )
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20, xlab=paste('n_1=',n_1,', n_2=',n_2), main=paste('delta=',delta_vec) )
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
plot(output_temp[,c('Y[1]','Y[2]')])
plot(output_temp[,c('Y[1]','Y[2]')])
n_1 = 4 # degrees of freedom
# define the expected value of the patient prior (prec_pred) be the mean of the control
# posterior
prec_pred = matrix( colMeans(posterior_ctrl[,c('tau[1,1,1]', 'tau[1,2,1]', 'tau[2,1,1]','tau[2,2,1]')]),
nrow=2, ncol=2, byrow=TRUE)
# increase the covariance between 'x' and 'y', keep variances the same
Sigma = solve(prec_pred)
delta_vec = c(2,-1.5,-1.5,2)
delta = matrix(delta_vec, nrow=2, ncol=2, byrow=TRUE)
# delta is positive definite
# if M and N are PD then M+N is also PD
# (the same holds for M,N PSD)
#
# # re-define the expectation of the prior
prec_pred = solve( Sigma + delta )
# define prior parameter
U_1 = prec_pred/n_1
n_2 = 3
U_2 = solve( matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=TRUE) )/n_2
plot_Wishart( rWishart(10000, df=n_1, Sigma=U_1), inv=TRUE )
plot_Wishart( rWishart(10000, df=n_2, Sigma=U_2), inv=TRUE )
mu1_mean = colMeans( posterior_ctrl[,c('mu[1,2]','mu[2,2]')])
mu1_prec = solve( var( posterior_ctrl[,c('mu[1,2]','mu[2,2]')] ) )
mu2_mean = mu1_mean/2
mu2_prec = solve( matrix( c(4,0,0,4), nrow=2, ncol=2, byrow=TRUE))
alpha_p = 2
beta_p = 2
pi = 1
data_temp = list(mu1_mean=mu1_mean, mu1_prec=mu1_prec,
mu2_mean=mu2_mean, mu2_prec=mu2_prec, df_1=n_1, df_2=n_1,
U_1=U_1, U_2=U_1, alpha_p=alpha_p, beta_p=beta_p)
model_temp = jags.model( textConnection(modelstring_temp), data=data_temp)
update(model_temp, n.iter=MCMCUpdates)
output_temp = coda.samples( model=model_temp, variable.names=c('Y'),
n.iter=100000, thin=MCMCUpdates_Thin)
plot(output_temp[,c('Y[1]','Y[2]')])
output_temp_df = as.data.frame(output_temp[[1]])
par(mfrow=c(1,1))
contour( kde2d(output_temp_df[,'Y[1]'], output_temp_df[,'Y[2]'], n=100),
nlevels=20, xlab=paste('n_1=',n_1,', n_2=',n_2), main=paste('delta=',delta_vec) )
